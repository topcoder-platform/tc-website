<?xml version="1.0"?>
<appSuite>
	<name>eCommerce</name>
	<catalog>java</catalog>
	<overview>This application suite has been compiled from TopCoder&#39;s Catalog of re-useable Java components with the focus on delivering the building blocks of an enterprise eCommerce website.   The suite includes the essentials for providing security for both data and users through industry standard encryption techniques.  The manipulation of data for both order capture and catalog presentation as well as the configuration features required to administer a dynamic website.  Customer communication components provide the priority based tracking of issues, email notification ability and mass email campaign capabilities.&lt;br/&gt;&lt;br/&gt;This suite has been used by TopCoder to deliver applications to our customers.  Each component is developed with the same engineering discipline found in TopCoder&#39;s Competitive Development Methodology.  The consistency and rigor put into all software developed at TopCoder starts from each building block within our catalog.&lt;br/&gt;&lt;br/&gt;If you are interested in learning more about purchasing a subscription to access TopCoder&#39;s components or to learn about TopCoder&#39;s Application Development Services, we can be reached at &lt;A href="mailto:sales@topcodersoftware.com"&gt;sales@topcodersoftware.com&lt;A&gt;.</overview>
	<functionality>&lt;li&gt;Online Checkout&lt;/li&gt;&lt;li&gt;Product Browsing&lt;/li&gt;&lt;li&gt;Security&lt;/li&gt;&lt;li&gt;Order Processing&lt;/li&gt;&lt;li&gt;Administration&lt;/li&gt;&lt;li&gt;Customer Communication&lt;/li&gt;</functionality>
	<sampleApp>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/highLevelUseCase.jpg'>High Level Use Case Diagram</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity1.jpg'>Activity Diagram 1</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity2.jpg'>Activity Diagram 2</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity3.jpg'>Activity Diagram 3</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity4.jpg'>Activity Diagram 4</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity5.jpg'>Activity Diagram 5</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity6.jpg'>Activity Diagram 6</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity7.jpg'>Activity Diagram 7</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/architecture.jpg'>Architecture</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/component.jpg'>Component Diagram</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/useCase.jpg'>Use Case Diagram</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/classDiag1.jpg'>Class Diagram 1</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/classDiag2.jpg'>Class Diagram 2</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/classDiag3.jpg'>Class Diagram 3</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/classDiag4.jpg'>Class Diagram 4</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag1.jpg'>Sequence Diagram 1</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag2.jpg'>Sequence Diagram 2</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag3.jpg'>Sequence Diagram 3</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag4.jpg'>Sequence Diagram 4</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag5.jpg'>Sequence Diagram 5</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag6.jpg'>Sequence Diagram 6</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag7.jpg'>Sequence Diagram 7</doc>
	</sampleApp>
	<caseStudy file='http://www.topcoder.com/i/downloads/Gift_Card_Case_Study.pdf'/>
	<componentList>
		<component name='Address Book' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8540094&ver=1'/>
		<component name='Auditor' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=10133265&ver=1'/>
		<component name='Authentication Factory' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=6403441&ver=1'/>
		<component name='Authorization' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=9932070&ver=1'/>
		<component name='Bag Collection' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=6508770&ver=1'/>
		<component name='Base Exception' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5710093&ver=1'/>
		<component name='Catalog' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8566897&ver=1'/>
		<component name='Configuration Manager' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=500004&ver=6'/>
		<component name='Credit Card Processor' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5704702&ver=1'/>
		<component name='Data Access Object Generator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=4313168&ver=1'/>
		<component name='Data Grouping' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5710148&ver=1'/>
		<component name='Data Selector' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2809469&ver=1'/>
		<component name='Data Validation' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7220290&ver=1'/>
		<component name='Database Abstraction' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2809552&ver=1'/>
		<component name='Document Generator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=600038&ver=1'/>
		<component name='Email Engine' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=600056&ver=2'/>
		<component name='Encryption' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2810520&ver=1'/>
		<component name='Event Engine' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=600083&ver=1'/>
		<component name='FTP Utility' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5501537&ver=1'/>
		<component name='File Upload' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=600131&ver=1'/>
		<component name='ID Generator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=3105029&ver=2'/>
		<component name='Image Converter' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5503427&ver=1'/>
		<component name='Image Resizing' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=3300851&ver=1'/>
		<component name='JNDI Context Utility' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5800426&ver=1'/>
		<component name='Job Scheduling' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=3300911&ver=1'/>
		<component name='LDAP SDK Interface' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8595304&ver=1'/>
		<component name='Lazy Instantiation List' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5703142&ver=1'/>
		<component name='List Manipulation' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5501597&ver=1'/>
		<component name='Logging Wrapper' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2300015&ver=3'/>
		<component name='Notification' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=600167&ver=1'/>
		<component name='Object Formatter' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2600179&ver=1'/>
		<component name='Password Validator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=9965883&ver=1'/>
		<component name='Phonetic Pattern Matching' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=6409352&ver=1'/>
		<component name='Priority Queue' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7311989&ver=1'/>
		<component name='Random String Generator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2803396&ver=1'/>
		<component name='Refreshable Cache' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7101323&ver=1'/>
		<component name='Search Engine' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2600393&ver=1'/>
		<component name='Security Manager' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=600215&ver=1'/>
		<component name='Shopping Cart' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7410707&ver=1'/>
		<component name='Simple Cache' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2804505&ver=1'/>
		<component name='Status Tracker' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8594269&ver=1'/>
		<component name='Timer' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2300028&ver=2'/>
		<component name='Value Object Generator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=4311680&ver=1'/>
	</componentList>
	<compDiagram>
		<appFunction name='Online Checkout' desc='Components within the online checkout module are designed to implement a standard checkout process capable of accepting orders, interfacing with back end order processing routines, and managing customer information such as shopping carts, address books and credit card information.'>
			<component name='Shopping Cart' details='http://software.topcoder.com/catalog/c_component.jsp?comp=7410707&ver=1' desc='The Shopping Cart component defines a data structure to hold and manage an online store&#39;s items. The component is optimized for speed and accessibility in order to be used in high volume eCommerce websites. The base shopping cart component can be customized to meet the needs of any online store. A user&#39;s shopping cart may be in an HTTP session or serialized to a database, providing a highly available and fault tolerant solution.&lt;br&gt;&lt;br&gt;The TopCoder Software database stores information on every component and it also stores all of the old information for the component anytime any information changes. Utilizing this component, the object responsible for updating the component information will be able to track the history of the component information as well.'/>
			<component name='Address Book' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8540094&ver=1' desc='The address book component allows for the creation and management of multiple address books and addresses for a specific entity. Books and addresses can be created, deleted or renamed. Any book can be set as the primary address book. Multiple addresses can be added to multiple address books.&lt;br&gt;&lt;br&gt;A user may create a profile on a website containing an address book. This user will then be able to create and edit all of their addresses and address book information online.'/>
			<component name='Data Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=7220290&ver=1' desc='The Data Validation component analyses objects to verify that the content meets defined rules. Object content is different for each class and is defined by each class specific DataValidation handler. For example, an Integer handler could validate that the object passed in is in fact an integer and falls within a specified range. In addition, data can be validated across object types.&lt;br&gt;&lt;br&gt;The Data Validation component can be used to facilitate server side data validation for web-based applications. The component can be used to validate that input parameters, which are all represented as strings, are of the correct type, length and within a specified range.'/>
			<component name='Object Formatter' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2600179&ver=1' desc='The Object Formatter component provides a generic API for formatting java objects. This component can be used to centralize data formatting within an application, group of applications or organization instead of having each "tier" of the application define its own formatting methods.'/>
			<component name='Timer' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2300028&ver=2' desc='The Timer component contains &#39;stopwatch&#39;type functionality to be integrated into existing and new software. This component enables run-time analysis by enabling developers to clock the execution speed of specified code blocks. Implementation of the timer solution is configurable to enable real-time configuration modifications. In addition, the timer component has minimal impact on processing speed when it is disabled.'/>
			<component name='Bag Collection' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6508770&ver=1' desc='The Bag Collection component adds the bag data structure with helper functions as an addition to the Java collection hierarchy. A bag is a collection of unordered items where an item may appear in the bag zero or more times. The cardinality of each unique item is maintained by the bag data structure. Items can be added and removed from the bag.&lt;br&gt;&lt;br&gt;The Bag Collection is used to store a list of scores and how many times that score occurred. For instance, if a set contains {65, 75, 80, 90} but a bag would contain the same information including the cardinality of each object, such as 75 occurred 3 times and 80 occurred twice in the set.'/>
			<component name='Currency' details='http://software.topcoder.com/catalog/c_component.jsp?comp=3102757&ver=1' desc='The Currency component provides the ability to represent and manipulate monetary values. The component manages the details of data precision, mathematical calculations and currency conversions.&lt;br&gt;&lt;br&gt;The Currency component can be used in any application that requires represention of money and currency. The component abstracts the details of in-memory representation, conversion and simple calculations.'/>
			<component name='Credit Card Wallet' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10445387&ver=1' desc='The credit card wallet component allows for the creation and management of multiple credit cards for a specific user. The wallet can be created, deleted or renamed. Any credit card in the wallet can be set as the primary credit card for the user. Multiple credit cards will be stored in the wallet.&lt;br&gt;&lt;br&gt;A user may create a profile on a website. The user will be able to create a wallet to store all of their credit card information.'/>
		</appFunction>
		<appFunction name='Product Browsing' desc='Components within the product browsing module provide the underlying functionality to perform catalog management.  This includes the navigation, searching, grouping, categorizing and relating of products.'>
			<component name='Data Grouping' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5710148&ver=1' desc='The Data Grouping component extracts, organizes and summarizes data sets by grouping data items together and performing aggregate functions on individual data items. It groups data items together, before executing grouping functions. Current functions supported include sum, count, average, min and max.&lt;br&gt;&lt;br&gt;Sales reports are stored as an array of line items. To determine the total sales for a product by region the data is grouped by product id, region id and the sales are totaled. The data can then be displayed by the reporting software.'/>
			<component name='Refreshable Cache' details='http://software.topcoder.com/catalog/c_component.jsp?comp=7101323&ver=1' desc='In addition to providing simple and effective server side caching, the Refreshable Cache offers the ability to refresh cached data on demand or at scheduled intervals. Any object stored in the cache, provides a function to reload the data when needed. Reloading of the data can be triggered programmatically or scheduled through the component.&lt;br&gt;&lt;br&gt;An example usage of the component is a website that utilizes country codes. In order to quickly access infrequently changing country codes, a website caches the country codes and refreshes the information from a database at defined intervals.'/>
			<component name='Lazy Instantiation List' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5703142&ver=1' desc='The lazy instantiation list provides a mechanism for caching a list of identifiers and retrieves the specific information for the identifier when it is accessed. When accessing information about an object, it is usually beneficial to load related objects into memory. However, having a large number of related objects in memory hurts performance when only a few objects are actually needed. Lazy instantiation loads objects into memory when needed and caches the objects using SimpleCache.&lt;br&gt;&lt;br&gt;A customer service application displays order numbers populated in the list. Once the order is accessed, the order object is retrieved from the database with all of the order information populated and formatted for display to the user.'/>
			<component name='List Manipulation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5501597&ver=1' desc='The List Manipulation Component provides in-memory sorting and filtering of data sets as well as optimized storage of and access to frequently used sorts. Data sets are defined as any group of inter-related data. The process of sorting and filtering data is typically reserved for a database. Providing an in-memory alternative will reduce database dependencies and enhance performance by reducing the overhead involved in requesting, manipulating and retrieving data.&lt;br&gt;&lt;br&gt;An example of where the List Manipulation Component might be used is in the TopCoder Software Search component. By implementing the List Manipulation Component, the requestor may quickly and easily switch between sort orders without requiring additional calls to the database server.'/>
			<component name='Search Engine' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2600393&ver=1' desc='The search component provides a way for an application to index and retrieve data that match a search provided by the application. The search treats all data as a document and depending on the document type different handlers for indexing data must be implemented. The default data is plain text. If users want to extend the search engine to handle more than plain text (i.e. Word documents, PDF documents, XML, etc.), the new document handlers can be added to the search engine.'/>
			<component name='Phonetic Pattern Matching' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6409352&ver=1' desc='The Phonetic Pattern Matching component provides a pluggable factory of sound matching algorithms. The initial algorithm used is the metaphone algorithm which is optimized for the English language. Matching one to four characters to a phonetic match provides improved matching for the search algorithm.&lt;br&gt;&lt;br&gt;A website needs to enter a user&#39;s city. If the user spells the name of the city wrong a match should still be found using the Phonetic Pattern matching component.'/>
			<component name='Data Selector' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2809469&ver=1' desc='The Data Selection component identifies data that meet a defined set of criteria. Data elements can be selected based on a number of factors, including historical usage, usage frequency, weighting and date ranges. In addition, the component provides the flexibility to add additional selection criteria.&lt;br&gt;&lt;br&gt;The Data Selection component has a number of uses. One is to select the image that should appear in a banner ad. Complex rules would allow ads to be selected based on weighting (80%), consecutive displays (Do not display more than 3 consecutive times) and time frame (Display between 1/1/03 and 2/1/03).&lt;br&gt;&lt;br&gt;Another usage of this component is to select review board members for component projects. Members can be selected based on availability, frequency (1x per week) and consecutive assignments.'/>
			<component name='Catalog' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8566897&ver=1' desc='The Catalog Component encapsulates the typical e-commerce catalog data structure and business logic while providing for custom extensions for specific customer use.&lt;br&gt;&lt;br&gt;A company wishing to create an e-commerce web site to sell products online will utilize the TopCoder Catalog Component to handle the persistence and promotions rules for their catalog of products.'/>
		</appFunction>
		<appFunction name='Foundation' desc='Foundation components are the infrastructure level components used by the application.  These components provide the very basic building blocks of the application such as configuration, logging, error handling, data caching and connectivity.'>
			<component name='Configuration Manager' details='http://software.topcoder.com/catalog/c_component.jsp?comp=500004&ver=6' desc='Software applications typically manage application level configuration details in "properties" or "ini" files. In the case of large applications and applications composed of distinct software components, there may be numerous configuration files, each bound to a particular functional component. The purpose of the Configuration Manager is to centralize the management of, and access to, these files.'/>
			<component name='JNDI Context Utility' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5800426&ver=1' desc='Java Naming and Directory Interface (JNDI) provides a common interface to both naming and directory services. The JNDI Context Utility simplifies access to JNDI Contexts, including creating Contexts, manipulating JNDI names and retrieving database connections or JMX resources. Additionally, the component provides a command line and programmatic interface for dumping the JNDI tree to an XML file.&lt;br&gt;&lt;br&gt;An example usage of this component is a website that needs to utilize EJBs which exist on numerous servers. One server is used for user information and another for transaction information. Using the JNDI Context Utility abstracts the context from the developers and makes the details configurable.'/>
			<component name='Value Object Generator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=4311680&ver=1' desc='The Value Object Generator component creates value objects which can be used to encapsulate information into java classes, such as a customer&#39;s name, address and phone number into one CustomerObject class. This resulting fine grained object provides an easy mechanism to serialize data for transport remotely or between software layers. In addition, this component is modeled after the J2EE Value object pattern.&lt;br&gt;&lt;br&gt;The Value Object Generator Component is used to auto generate the mundane, time consuming and tedious code development of value objects. Once generated the object is used to serialize data for transportation between remote calls, such as a web service.'/>
			<component name='Simple Cache' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2804505&ver=1' desc='The Simple Cache component provides the ability to quickly and effectively implement a server-side caching strategy. The component is intended for use within a single JVM and supports the caching of any Java Object. The component is designed to provide fast, efficient, multi-threaded access to commonly used objects.'/>
			<component name='Base Exception' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5710093&ver=1' desc='In order to handle exceptions and errors in a unified manner, a generic exception class is needed. Error processing logic is simplified since an application can throw one Throwable object wrapping several error types. The Base Exception component follows the chained exception paradigm.&lt;br&gt;&lt;br&gt;TopCoder components throw custom exceptions inherited from the same base class to simplify error handling.'/>
			<component name='Logging Wrapper' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2300015&ver=3' desc='The .NET Logging Wrapper component provides a standard logging API with support for pluggable back-end logging solutions. Components utilizing the .NET Logging Wrapper are not tied to a specific logging solution. A change to the pluggable back-end logging solution does not require a code change to the .NET Logging Wrapper component.&lt;br&gt;&lt;br&gt;The initial use of the .NET Logging Wrapper component will be within other TopCoder Software components. This will allow TopCoder Software components to be plugged into an existing environment without requiring the additional configuration and implementation of a specific logging solution.'/>
			<component name='ID Generator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=3105029&ver=2' desc='The IDGenerator component provides high performance key generation services. It generates unique long IDs while minimizing both network and database overhead. The IDGenerator works by implementing a High/Low pattern to generate unique IDs. It also allows IDs to be generated specifically for a user-defined value.&lt;br&gt;&lt;br&gt;The first call to IDGenerator queries a database table for the next available high value and sets a low value to 1. A new high value is calculated by adding a range variable to the current high value. This new high value is saved back to the database table. The IDGenerator then combines the current high value and the low value into a long datatype. All subsequent calls to the IDGenerator will simply increment the low value in memory and return the combined long value. When the low value hits the limit, a new high value is retrieved from the database table.'/>
			<component name='Database Abstraction' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2809552&ver=1' desc='The Database Abstraction component provides a common set of Java classes that abstract the mapping of database data types to the corresponding java objects. Mappings are provided for Oracle, Informix and MS SQLServer.'/>
			<component name='Data Access Object Generator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=4313168&ver=1' desc='The Data Access Object (DAO) Generator component creates classes that can be used to access a persistent data-store. Utilizing a generic DAO generator allows developers to concentrate on complex business logic using standard, light-weight classes rather than writing the classes from scratch.&lt;br&gt;&lt;br&gt;In order to create reports, the DAO generator takes a list of SQL statements and generates a class to directly retrieve the necessary data from the database.'/>
		</appFunction>
		<appFunction name='Security' desc='This module provides components that facilitate user and data security.  The security module is in charge of both authentication and authorization. The module provides facilities for advanced identity management including single sign on, role based security and the assignment of granular permissions.  The security module also includes components to perform user self management features such as registration, activation and password generation.'>
			<component name='LDAP SDK Interface' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8595304&ver=1' desc='The LDAP SDK Interface component provides a means to perform standard LDAP functions through a consistent API regardless of the underlying SDK. Initially, only an interface to the Netscape Directory SDK will be provided, but will be possible to develop plugins for other SDKs and configure the LDAP SDK Interface without changing client code.&lt;br&gt;&lt;br&gt;An identity management application would use this component to gather and update employee profile information from the company LDAP server.'/>
			<component name='Random String Generator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2803396&ver=1' desc='The Random String Generator is used to generate pseudo-randomly generated strings. Users can control the desired length and character range of the string. This component will typically be used for password generation.'/>
			<component name='Authentication Factory' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6403441&ver=1' desc='The Authentication Factory abstracts the logic of authenticating a user against a specific implementation from the business tier. Utilizing the generic authentication factory, a company is not tied to a specific authentication scheme or product. A new implementation can easily be replaced without changing any existing code.&lt;br&gt;&lt;br&gt;Connecting to an NTTP server requires authentication. There are numerous forms of authentication techniques supported by NNTP, such as encrypted password or clear text authentication. This component abstracts the authentication logic from the core component logic.'/>
			<component name='Authorization' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9932070&ver=1' desc='Authorization is one part of the overall Security picture. Fundamentally, authorization answers of the question: can this entity perform this action on this object?&lt;br&gt;&lt;br&gt;The authorization component provides the framework for applications that require authorization checks. It may be used in conjunction with other security components, such as a User component and an Authentication component, to provide a complete security solution for an application. A particular application would extend the Authorization framework to define the particular authorization scheme needed.&lt;br&gt;&lt;br&gt;A web-based application could be build in which the web server handles authentication automatically, but the application must have rights based on who the user is. The application will use the user ID passed in by the web server as the basis for getting the user&#39;s rights, which will then be used by the application for determining access.'/>
			<component name='Encryption' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2810520&ver=1' desc='The Encryption component provides a simplified framework for performing encryption/decryption routines. This framework can be used to easily access any implemented encryption algorithms to manipulate the target data source. The pluggable design enables additional encryption algorithms to be added to the list of available algorithms.&lt;br&gt;&lt;br&gt;Encryption is a vital mechanism for securing information. This component can be used to encrypt/decrypt data in any Java enabled application including databases, files, network communications and plain text.'/>
			<component name='Password Validator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9965883&ver=1' desc='The password validator component provides one centralized component to control an enterprise&#39;s password rules. The validator allows a user to customize the formatting of passwords including the minimum length of the password and the contents of the password. Configurable attributes of the password content including using a dictionary to check the password against as well as the number and combination of letters, characters and numbers allowed in the password. Furthermore, this component includes password expiry rules.&lt;br&gt;&lt;br&gt;TopCoder may need to set more stringent passwords for certain users who have a greater amount of privileges. This component will ensure that all password changes are valid and that the password itself is valid.'/>
			<component name='Security Manager' details='http://software.topcoder.com/catalog/c_component.jsp?comp=600215&ver=1' desc='Most applications require authentication and user security to restrict access to data or use of functionality. There are many commonalities in the functionality required by these various applications. The purpose of the Security Manager is to provide a reusable set of functionality that encompasses these needs.'/>
		</appFunction>
		<appFunction name='Order Processing' desc='Backend order processing typically requires a lot of batch processing for integration with external systems such as fulfillment, accounting or services such as address validation, tax calculation and credit card processing.'>
			<component name='Job Scheduling' details='http://software.topcoder.com/catalog/c_component.jsp?comp=3300911&ver=1' desc='The Job Scheduling Component enables the timed execution of specified tasks. This functionality is similar to the Unix cron utility and variants that exist on most operating system. Users can schedule both one-time and repeating tasks.&lt;br&gt;&lt;br&gt;An example usage for this component is for the scheduled execution of a monthly maintenance process that searches a file system for log files, zips those files for archival purposes and removes the original files from the file system.'/>
			<component name='FTP Utility' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5501537&ver=1' desc='The FTP Utility component provides standard FTP commands in an easy to use API. FTP connections can be initiated in passive or active mode. Files can be transferred in ASCII or binary mode. For FTP commands that are not supported by this component, a facility is available to enter those commands directly through the API.&lt;br&gt;&lt;br&gt;A scheduled job requires the movement of the daily report spreadsheet to a web server. The FTP component is used to programmatically transfer the file to the web server for distribution.'/>
			<component name='Credit Card Processor' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5704702&ver=1' desc='The Credit Card Processing component abstracts payment authorization and capture from transaction processors. The component provides an interface for pluggable processors, so that a company can switch between processors without modifying any existing code. The component supports both credit and debit cards.&lt;br&gt;&lt;br&gt;For an e-commerce site that processes credit card transactions, this component removes the dependency on a particular processor allowing for multiple processors to be utilized.'/>
			<component name='Status Tracker' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8594269&ver=1' desc='Most business applications have the concept of status in place around the individual entities involved within an application. The Status Tracker component provides a flexible, database independent API for tracking statuses of particular objects.&lt;br&gt;&lt;br&gt;Order Entry applications track the current and historical statuses that every order goes through. Human Resources applications track the employment status of a company&#39;s workforce. The DB Status Handler component will provide a simple interface for taking entities within a database and managing the status of these entities.'/>
		</appFunction>
		<appFunction name='Administration' desc='Every website requires administration features for monitoring the website, manipulating content such as product information or promotions.  Our administration components are designed from our experience building applications for customers of TopCoder as well as TopCoder&#39;s internal website administration.'>
			<component name='File Upload' details='http://software.topcoder.com/catalog/c_component.jsp?comp=600131&ver=1' desc='The File Upload component supports web-based file uploads. Files are received via HTTP requests. Applications implementing the component have the ability to store uploaded files on the file system or are given access to the file to enable storage in a database.'/>
			<component name='Image Resizing' details='http://software.topcoder.com/catalog/c_component.jsp?comp=3300851&ver=1' desc='The Image Resizing component accepts images and resizes them while maintaining the original aspect ratio. The component relies on the underlying image file to determine the existing image size thereby eliminating the need for GUI-based image manipulation. This functionality is currently available through existing image editing applications but requires a desktop application to view and manipulate the image. The Image Resizing component provides this same functionality through an API.&lt;br&gt;&lt;br&gt;The Image Resizing component can be used to generate multiple sizes of the same image for use on a website.'/>
			<component name='Image Converter' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5503427&ver=1' desc='The Image Converter component translates one image format to another format. Conversion between different image types requires distinct decompression and compression algorithms defined by the Image Converter. The initial conversion supports converting BMP to PNG. Additional conversions may be added through a pluggable interface.&lt;br&gt;&lt;br&gt;A third party content management supplier provides images as BMP files. An example usage of the Image Converter component is to decompress the BMP files and convert them to PNG for deployment to a website.'/>
		</appFunction>
		<appFunction name='Customer Communication' desc='Customer communication is imperative for giving customers real-time feedback into their orders as well as driving new sales to the websites through mass email campaigns. This requirement is similar to TopCoder&#39;s communication to the member base of software developers.'>
			<component name='Event Engine' details='http://software.topcoder.com/catalog/c_component.jsp?comp=600083&ver=1' desc='The Event Engine component is an event driven service that manages the triggering of events based on the receiving of alerts. The Event Engine works with three plugable services: the registry handler, the alert handler and the event handler. The registry handler is used by the Event Engine to map alert handlers to event handlers. When a specific alert is received a specific event will be triggered. An alert handler is responsible for notifying the Event Engine when a specific event takes place. An event handler performs a specific function when it&#39;s corresponding alert is received. The event engine manages the entire process.'/>
			<component name='Document Generator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=600038&ver=1' desc='The Document Generator creates text files based on templates. It will be used to automatically generate build scripts for TopCoder components, driven by a template stored in a database.&lt;br&gt;&lt;br&gt;TopCoder generates a build file for each component as it goes in to development. This file is based on a template, and modified by hand to suit the particular component.'/>
			<component name='Email Engine' details='http://software.topcoder.com/catalog/c_component.jsp?comp=600056&ver=2' desc='The Email Engine component provides basic and advanced email functionality through Java API&#39;s. It is not a GUI-based component such as Outlook Express or Yahoo Mail that manages user email accounts. Rather, the Email Engine is a set of Java API&#39;s that enables a developer to send emails directly from application code.'/>
			<component name='Notification' details='http://software.topcoder.com/catalog/c_component.jsp?comp=600167&ver=1' desc='The Notification Component is an implementation of an event driven service that manages user and system messages. It is responsible for scheduling, sending and tracking email messages. The Notification component implements an Alert Handler and an Event Handler for the TopCoder Software Event Engine. The Alert Handler polls a database searching for messages that trigger the event. The Event Handler implements the TopCoder Software Email engine to send the appropriate email.'/>
			<component name='Priority Queue' details='http://software.topcoder.com/catalog/c_component.jsp?comp=7311989&ver=1' desc='The Priority Queue component supports standard Collection functionality, except that it does not follow the first-in-first-out (FIFO) paradigm. Items added to a Priority Queue require assignment of a priority level. Items can be pushed onto the queue in arbitrary order, but are poped off based on their assigned priority.&lt;br&gt;&lt;br&gt;An example of the Priority Queue component is a Quality of Service (QoS) aware transport layer. Each piece of data might be prioritized and retrieved according to priority for packaging and transmission.'/>
			<component name='Auditor' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10133265&ver=1' desc='The Auditor provides an easy-to-use API to record modifications to objects by application users. It records a unique object identifier, unique user identifier, modification date and an optional comment to a database for later analysis.The Auditor can be used in a variety of applications to easily provide fundamental auditing information.'/>
		</appFunction>
	</compDiagram>
</appSuite>