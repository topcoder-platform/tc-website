<?xml version="1.0"?>
<appSuite>
	<name>eCommerce</name>
	<catalog>dotnet</catalog>
	<overview>This application suite has been compiled from TopCoder&#39;s Catalog of re-useable .Net components with the focus on delivering the building blocks of an enterprise eCommerce website.   The suite includes the essentials for providing security for both data and users through industry standard encryption techniques.  The manipulation of data for both order capture and catalog presentation as well as the configuration features required to administer a dynamic website.  Customer communication components provide the priority based tracking of issues, email notification ability and mass email campaign capabilities.&lt;br/&gt;&lt;br/&gt;This suite has been used by TopCoder to deliver applications to our customers.  Each component is developed with the same engineering discipline found in TopCoder&#39;s Competitive Development Methodology.  The consistency and rigor put into all software developed at TopCoder starts from each building block within our catalog.&lt;br/&gt;&lt;br/&gt;If you are interested in learning more about purchasing a subscription to access TopCoder&#39;s components or to learn about TopCoder&#39;s Application Development Services, we can be reached at &lt;A href="mailto:sales@topcodersoftware.com"&gt;sales@topcodersoftware.com&lt;A&gt;.</overview>
	<functionality>&lt;li&gt;Online Checkout&lt;/li&gt;&lt;li&gt;Product Browsing&lt;/li&gt;&lt;li&gt;Security&lt;/li&gt;&lt;li&gt;Order Processing&lt;/li&gt;&lt;li&gt;Administration&lt;/li&gt;&lt;li&gt;Customer Communication&lt;/li&gt;</functionality>
	<sampleApp>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/highLevelUseCase.jpg'>High Level Use Case Diagram</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity1.jpg'>Activity Diagram 1</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity2.jpg'>Activity Diagram 2</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity3.jpg'>Activity Diagram 3</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity4.jpg'>Activity Diagram 4</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity5.jpg'>Activity Diagram 5</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity6.jpg'>Activity Diagram 6</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/activity7.jpg'>Activity Diagram 7</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/architecture.jpg'>Architecture</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/component.jpg'>Component Diagram</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/useCase.jpg'>Use Case Diagram</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/classDiag1.jpg'>Class Diagram 1</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/classDiag2.jpg'>Class Diagram 2</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/classDiag3.jpg'>Class Diagram 3</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/classDiag4.jpg'>Class Diagram 4</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag1.jpg'>Sequence Diagram 1</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag2.jpg'>Sequence Diagram 2</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag3.jpg'>Sequence Diagram 3</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag4.jpg'>Sequence Diagram 4</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag5.jpg'>Sequence Diagram 5</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag6.jpg'>Sequence Diagram 6</doc>
		<doc file='http://software.topcoder.com/images/catalog/appsuites/ecommerce/seqDiag7.jpg'>Sequence Diagram 7</doc>
	</sampleApp>
	<caseStudy file='http://www.topcoder.com/i/downloads/Gift_Card_Case_Study.pdf'/>
	<componentList>
		<component name='Address Book' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8603710&ver=1'/>
		<component name='Auditor' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=10167351&ver=1'/>
		<component name='Authentication' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=10166027&ver=1'/>
		<component name='Authorization' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7325387&ver=1'/>
		<component name='Catalog' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8567005&ver=1'/>
		<component name='Configuration Manager' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=5904571&ver=1'/>
		<component name='Connection Factory' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=9900311&ver=1'/>
		<component name='Credit Card Validation' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532&ver=1'/>
		<component name='Data Access Interface' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8595405&ver=1'/>
		<component name='Data Validation' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8536620&ver=1'/>
		<component name='Document Generator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8567592&ver=1'/>
		<component name='Email Engine' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=4208949&ver=1'/>
		<component name='Encryption' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8444506&ver=1'/>
		<component name='Event Engine' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=10006917&ver=1'/>
		<component name='File Upload' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=8447769&ver=1'/>
		<component name='ID Generator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=9947626&ver=1'/>
		<component name='Logging Wrapper' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=4311341&ver=1'/>
		<component name='Multi-File Upload' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=10254868&ver=1'/>
		<component name='Object Formatter' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7353581&ver=1'/>
		<component name='Password Validator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=9947659&ver=1'/>
		<component name='Phonetic Pattern Matching' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7387570&ver=1'/>
		<component name='Priority Queue' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=6511227&ver=1'/>
		<component name='Refreshable Cache' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=9979843&ver=1'/>
		<component name='Simple Cache' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7351856&ver=1'/>
		<component name='Status Tracker' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=10164718&ver=1'/>
	</componentList>
	<compDiagram>
		<appFunction name='Online Checkout' desc='Components within the online checkout module are designed to implement a standard checkout process capable of accepting orders, interfacing with back end order processing routines, and managing customer information such as shopping carts, address books and credit card information.'>
			<component name='Address Book' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8603710&ver=1' desc='The address book component allows for the creation and management of multiple address books and addresses for a specific entity. Books and addresses can be created, deleted or renamed. Any book can be set as the primary address book. Multiple addresses can be added to multiple address books.&lt;br&gt;&lt;br&gt;A user may create a profile on a website containing an address book. This user will then be able to create and edit all of their addresses and address book information online. Another example includes setting up a business as a contact with multiple addresses one for billing and one for shipping.'/>
			<component name='Data Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8536620&ver=1' desc='The Data Validation component analyses objects to verify that the content meets defined rules. Object content is different for each class and is defined by each class specific DataValidation handler. For example, an Integer handler could validate that the object passed in is in fact an integer and falls within a specified range. In addition, data can be validated across object types.&lt;br&gt;&lt;br&gt;The Data Validation component can be used to facilitate server side data validation for web-based applications. The component can be used to validate that input parameters, which are all represented as strings, are of the correct type, length and within a specified range.'/>
			<component name='Object Formatter' details='http://software.topcoder.com/catalog/c_component.jsp?comp=7353581&ver=1' desc='The Object Formatter component provides a generic API for formatting .NET objects. This component can be used to centralize data formatting within an application, group of applications or organization instead of having each "tier" of the application define its own formatting methods.'/>
		</appFunction>
		<appFunction name='Product Browsing' desc='Components within the product browsing module provide the underlying functionality to perform catalog management.  This includes the navigation, searching, grouping, categorizing and relating of products.'>
			<component name='Refreshable Cache' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9979843&ver=1' desc='In addition to providing simple and effective server side caching, the Refreshable Cache offers the ability to refresh cached data on demand or at scheduled intervals. The Refreshable Cache provides a way for user&#39;s to define how their data is refreshed, and then manages the triggering of the actual refresh. Reloading of the data can be triggered programmatically or scheduled through the component.&lt;br&gt;&lt;br&gt;An example usage of the component is a database reporting application. Since data loads happen on a scheduled basis, most reports can be chaced between data loads. On a scheduled interval, the cache should be refreshed from the latest data load.'/>
			<component name='Phonetic Pattern Matching' details='http://software.topcoder.com/catalog/c_component.jsp?comp=7387570&ver=1' desc='The Phonetic Pattern Matching component provides a pluggable factory of sound matching algorithms. The initial algorithm used is the metaphone algorithm which is optimized for the English language. Matching one to four characters to a phonetic match provides improved matching for the search algorithm.&lt;br&gt;&lt;br&gt;An application requires a country name as input, but the user is unsure of the spelling. If the spelling is not exactly correct, the Phonetic Pattern Matching component will enable the application to suggest possible matches for the user to select from.'/>
			<component name='Catalog' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8567005&ver=1' desc='The Catalog Component encapsulates the typical e-commerce catalog data structure and business logic while providing for custom extensions for specific customer use.&lt;br&gt;&lt;br&gt;A company wishing to create an e-commerce web site to sell products online will utilize the TopCoder Catalog Component to handle the persistence and promotions rules for their catalog of products.'/>
		</appFunction>
		<appFunction name='Foundation' desc='Foundation components are the infrastructure level components used by the application.  These components provide the very basic building blocks of the application such as configuration, logging, error handling, data caching and connectivity.'>
			<component name='Configuration Manager' details='http://software.topcoder.com/catalog/c_component.jsp?comp=5904571&ver=1' desc='.NET libraries do not currently support automatic loading of configuration files. In the instance of a library dll used in numerous applications, adding additional configuration details to all of the applications&#39; configuration files is not optimal. The purpose of the Configuration Manager is to centralize the management of, and access to, these files.&lt;br&gt;&lt;br&gt;A library for sending emails requires configuring the SMTP server address and port. A web application using this library does not want to configure these details in the web.xml.'/>
			<component name='Simple Cache' details='http://software.topcoder.com/catalog/c_component.jsp?comp=7351856&ver=1' desc='The Simple Cache component provides the ability to quickly and effectively implement a server-side caching strategy. The component is intended for use within a single application and supports the caching of any .NET Object. The component is designed to provide fast, efficient, multi-threaded access to commonly used objects.'/>
			<component name='Logging Wrapper' details='http://software.topcoder.com/catalog/c_component.jsp?comp=4311341&ver=1' desc='The .NET Logging Wrapper component provides a standard logging API with support for pluggable back-end logging solutions. Components utilizing the .NET Logging Wrapper are not tied to a specific logging solution. A change to the pluggable back-end logging solution does not require a code change to the .NET Logging Wrapper component.&lt;br&gt;&lt;br&gt;The initial use of the .NET Logging Wrapper component will be within other TopCoder Software components. This will allow TopCoder Software components to be plugged into an existing environment without requiring the additional configuration and implementation of a specific logging solution.'/>
			<component name='ID Generator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9947626&ver=1' desc='The ID Generator component provides high performance key generation services. It generates unique long IDs while minimizing both network and database overhead. The ID Generator works by implementing a High/Low scheme to generate unique IDs. It also allows IDs to be generated uniquely for a user-defined value.&lt;br&gt;&lt;br&gt;TopCoder might use the ID Generator in the generation of new identifiers for an artificial primary key to a database table. Each time a new primary key is required a call to the ID Generator returns a new primary key. If the application prefers to allow separate sets of ID&#39;s generated per table, the application can call the ID Generator passing the table name as the user defined value. A separate ID is then maintained by table name.'/>
			<component name='Connection Factory' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9900311&ver=1' desc='The Connection Factory component decouples a particular database implementation from applications and other components by providing a layer of abstraction around the creation of a database connection.&lt;br&gt;&lt;br&gt;Any application with database connectivity would use this component create database connections. Administrators could then swap out the underlying database implementation and simply change the configuration of the Connection Factory to compensate.'/>
			<component name='Data Access Interface' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8595405&ver=1' desc='The Data Access Interface component provides a means to perform functions of Microsoft&#39;s Data Access Application Block (DAAB) regardless of the underlying database implementation.&lt;br&gt;&lt;br&gt;Any application with database connectivity would use this component to execute a variety of different command types against the database. Administrators could then swap out the underlying database implementation without having to change the code that uses the Data Access Interface component.'/>
		</appFunction>
		<appFunction name='Security' desc='This module provides components that facilitate user and data security.  The security module is in charge of both authentication and authorization. The module provides facilities for advanced identity management including single sign on, role based security and the assignment of granular permissions.  The security module also includes components to perform user self management features such as registration, activation and password generation.'>
			<component name='Authentication' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10166027&ver=1' desc='The authentication component is responsible for user authentication within a system. Using the factory pattern, this component allows for the use of other pluggable authentication implementations through the same interface. The included TopCoder implementation is a primary player in the TopCoder Security Component Suite.&lt;br&gt;&lt;br&gt;An ecommerce site stores shopper information to allow for faster checkout. This site would require a username and password from the user in order to proceed securely. The .NET Authentication component facilitates the authentication of that user.'/>
			<component name='Authorization' details='http://software.topcoder.com/catalog/c_component.jsp?comp=7325387&ver=1' desc='Authorization is one part of the overall Security picture. Fundamentally, authorization answers of the question: can this entity perform this action on this object?&lt;br&gt;&lt;br&gt;The authorization component provides the framework for applications that require authorization checks. It may be used in conjunction with other security components, such as a User component and a Authentication component, to provide a complete security solution for an application. A particular application would extend the Authorization framework to define the particular authorization scheme needed.&lt;br&gt;&lt;br&gt;A TopCoder client is building a new web-based application. The web server handles authentication automatically, but the application must have rights based on who the user is. The application will use the user ID passed in by the web server as the basis for getting the user&#39;s rights, which will then be used by the application for determining access.'/>
			<component name='Encryption' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8444506&ver=1' desc='The Encryption component provides a simplified framework for performing encryption/decryption routines. This framework can be used to easily access any implemented encryption algorithms to manipulate the target data source. The pluggable design enables additional encryption algorithms to be added to the list of available algorithms.&lt;br&gt;&lt;br&gt;Encryption is a vital mechanism for securing information. This component can be used to encrypt/decrypt data in any .NET application including databases, files, network communications and plain text.'/>
			<component name='Password Validator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9947659&ver=1' desc='The password validator component provides one centralized component to control an enterprise&#39;s password rules. The validator allows a user to customize the formatting of passwords including the minimum length of the password and the contents of the password. Configurable attributes of the password content including using a dictionary to check the password against as well as the number and combination of letters, characters and numbers allowed in the password. Furthermore, this component includes password expiry rules.&lt;br&gt;&lt;br&gt;TopCoder may need to set more stringent passwords for certain users who have a greater amount of privileges. This component will ensure that all password changes are valid and that the password itself is valid.'/>
		</appFunction>
		<appFunction name='Order Processing' desc='Backend order processing typically requires a lot of batch processing for integration with external systems such as fulfillment, accounting or services such as address validation, tax calculation and credit card processing.'>
			<component name='Status Tracker' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10164718&ver=1' desc='Most business applications have the concept of status in place around the individual entities involved within an application. The Status Tracker component provides a flexible, database independent API for tracking statuses of particular objects.&lt;br&gt;&lt;br&gt;Order Entry applications track the current and historical statuses that every order goes through. Human Resources applications track the employment status of a company&#39;s workforce. The DB Status Handler component will provide a simple interface for taking entities within a database and managing the status of these entities.'/>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532&ver=1' desc='The Credit Card Validation Component provides the algorithms to validate the accuracy and validity of a credit card number. However, this component only validates formatting and does not guarantee the credit card number will be authorized by a bank. The algorithm provides a simple check digit calculation and pattern match algorithm to verify the number is formatted properly. An ASP.NET Validation Control interface is also supported in order to add the credit card validation directly to an ASP.NET page.&lt;br&gt;&lt;br&gt;E-Commerce websites need to validate credit card numbers prior to sending the information. A user of this component will be able to determine that 4123123467891234 is not a valid MasterCard number.'/>
		</appFunction>
		<appFunction name='Administration' desc='Every website requires administration features for monitoring the website, manipulating content such as product information or promotions.  Our administration components are designed from our experience building applications for customers of TopCoder as well as TopCoder&#39;s internal website administration.'>
			<component name='File Upload' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8447769&ver=1' desc='The File Upload component supports web-based file uploads. Files are received via HTTP requests. Applications implementing the component have the ability to store uploaded files on the file system or are given access to the file to enable storage in a database.&lt;br&gt;&lt;br&gt;An example of the file upload component in use is the TopCoder.com website. The file upload component has been integrated into the site so that members can upload their photos over the web and have them appear in real-time.'/>
			<component name='Multi-File Upload' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10254868&ver=1' desc='The Multi-File Upload Component provides the ability for web applications to support multi-file uploads. Users will browse to a folder on their local hard drive using a familiar &#39;Windows-like&#39; browse window and all files within that folder and/or its subfolders can be uploaded with a single click of a button.&lt;br&gt;&lt;br&gt;The Multi-File Upload Component is implemented as a signed ActiveX Control in the .NET environment so that security issues can be allayed. Users will download the compact ActiveX control upon first use and can then utilize the functionality of the component on a single PC without having to download each time.'/>
		</appFunction>
		<appFunction name='Customer Communication' desc='Customer communication is imperative for giving customers real-time feedback into their orders as well as driving new sales to the websites through mass email campaigns. This requirement is similar to TopCoder&#39;s communication to the member base of software developers.'>
			<component name='Event Engine' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10006917&ver=1' desc='The Event Engine component is an event-driven service that manages the triggering of events based on the receiving of alerts. The Event Engine works with three pluggable services: the registry handler, the alert handler and the event handler. The registry handler is used by the Event Engine to map alert handlers to event handlers. When a specific alert is received a specific event will be triggered. An alert handler is responsible for notifying the Event Engine when a specific event takes place. An event handler performs a specific function when it&#39;s corresponding alert is received. The event engine manages the entire process.&lt;br&gt;&lt;br&gt;As an example, the default handlers can be used to create a message to be sent via email. The message would be stored in the SQL Server database for some delivery time. The alert handler would poll the database for the message and create an event to be delivered by the Event Engine. The Event Engine would then hand this event off to the event handler for formatting and sending the document via email.'/>
			<component name='Document Generator' details='http://software.topcoder.com/catalog/c_component.jsp?comp=8567592&ver=1' desc='The Document Generator creates text files based on templates. It will be used to automatically generate build scripts for TopCoder components, driven by a template stored in a database.&lt;br&gt;&lt;br&gt;TopCoder generates a build file for each component as it goes in to development. This file is based on a template, and modified by hand to suit the particular component.'/>
			<component name='Email Engine' details='http://software.topcoder.com/catalog/c_component.jsp?comp=4208949&ver=1' desc='The Email Engine component provides basic and advanced email functionality through API&#39;s. It is not a GUI-based component such as Outlook Express or Yahoo Mail that manages user email accounts. Rather, the Email Engine is a set of API&#39;s that enables a developer to send emails directly from application code.'/>
			<component name='Priority Queue' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6511227&ver=1' desc='The Priority Queue component supports standard queue functionality, except that it does not follow the first-in-first-out (FIFO) paradigm. Items added to a priority queue implementation require assigning a priority level to the item. Items then can be added in arbitrary order to the queue, but are removed based on the priority.&lt;br&gt;&lt;br&gt;An example of the Priority Queue component is a customer support line. A priority queue is used to process questions from customers according to customer level; gold support level customers are always processed first.'/>
			<component name='Auditor' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10167351&ver=1' desc='The Auditor provides an easy-to-use API to record modifications to objects by application users. It records a unique object identifier, unique user identifier, modification date and an optional comment to a database for later analysis.&lt;br&gt;&lt;br&gt;The Auditor can be used in a variety of applications to easily provide fundamental auditing information.'/>
		</appFunction>
	</compDiagram>
</appSuite>