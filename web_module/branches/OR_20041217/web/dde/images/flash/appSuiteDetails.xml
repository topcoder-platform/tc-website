<?xml version="1.0"?>
<appSuite>
	<name>E-commerce Application Suite</name>
	<catalog>java</catalog>
	<overview>This application suite is built from the ground up as an online business tool, encompassing every aspect needed to make your website a fully functional commerce center.&lt;br&gt;&lt;br&gt;TopCoder's member base is a distributed resource that spans over 150 countries. Unlike strictly off-shore development firms, it doesn't matter what country our members call home, as long as they've proven that they can deliver a better solution than their peers. Since our members work for TopCoder as contractors, not employees, our fixed costs are much lower than our competition.&lt;br&gt;&lt;br&gt;We've spent a year developing substantial catalogs of re-usable Java and .NET components. Re-using these bits of software over and over on client projects allows us to substantially shorten timelines and decrease costs. We then pass these savings onto our clients.&lt;br&gt;&lt;br&gt;Differentiating our members by talent through competition insures that only quality developers are working on our code. Each week, hundreds of TopCoder members compete in programming competitions, where they are rated based on the results. Only members with acceptable ratings are allowed to develop software for TopCoder Software. Our Component Catalogs are made up of the extremely high quality components developed by our members. These components are of such high quality due to the fact that they have been used and re-used in multiple applications. TopCoder strives to develop as many applications with re-usable components as possible.</overview>
	<functionality>&lt;li&gt;Security&lt;/li&gt;&lt;li&gt;Credit Card Validation&lt;/li&gt;&lt;li&gt;Shopping Cart System&lt;/li&gt;&lt;li&gt;Inventory Database&lt;/li&gt;</functionality>
	<sampleApp>
		<doc file='http://software.topcoder.com/catalog/document?id=5905706'>Requirement Specification</doc>
		<doc file='http://software.topcoder.com/catalog/document?id=7308708'>Component Specification</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Use_Case_Diagram.jpg'>Use Case Diagram</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Class_Diagram.jpg'>Class Diagram</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_1.jpg'>Sequence Diagram 01</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_2.jpg'>Sequence Diagram 02</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_3.jpg'>Sequence Diagram 03</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_4.jpg'>Sequence Diagram 04</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_5.jpg'>Sequence Diagram 05</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_6.jpg'>Sequence Diagram 06</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_7.jpg'>Sequence Diagram 07</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_8.jpg'>Sequence Diagram 08</doc>
		<doc file='http://172.16.20.20/i/development/Spreadsheet_Engine_Sequence_Diagram_9.jpg'>Sequence Diagram 09</doc>
		<doc file='http://software.topcoder.com/catalog/document?id=7570555'>Aggregated Design Scorecard</doc>
		<doc file='http://software.topcoder.com/catalog/document?id=7570507'>Aggregated Development Scorecard</doc>
		<doc file='http://software.topcoder.com/catalog/javadoc/5904397/5904399/index.html'>Javadocs</doc>
	</sampleApp>
	<caseStudy file=''/>
	<componentList>
		<component name='Authorization' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=9932070&ver=1'/>
		<component name='Bar Code Generator' ID='http://software.topcoder.com/catalog/c_component.jsp?comp='/>
		<component name='Currency' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=3102757'/>
		<component name='Database Abstraction' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=2809552'/>
		<component name='Date Validation' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7220290'/>
		<component name='Shopping Cart' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=7410707'/>
		<component name='Unit Converter' ID='http://software.topcoder.com/catalog/c_component.jsp?comp=4228038'/>
	</componentList>
	<compDiagram>
		<appFunction name='Security'>
			<component name='Authorization' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9932070&ver=1' desc='Authorization is one part of the overall Security picture. Fundamentally, authorization answers of the question: can this entity perform this action on this object? The authorization component provides the framework for applications that require authorization checks. It may be used in conjunction with other security components, such as a User component and an Authentication component, to provide a complete security solution for an application. A particular application would extend the Authorization framework to define the particular authorization scheme needed. A web-based application could be build in which the web server handles authentication automatically, but the application must have rights based on who the user is. The application will use the user ID passed in by the web server as the basis for getting the users rights, which will then be used by the application for determining access.'/>
			<component name='Authentication Factory' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6403441' desc='The Authentication Factory abstracts the logic of authenticating a user against a specific implementation from the business tier. Utilizing the generic authentication factory, a company is not tied to a specific authentication scheme or product. A new implementation can easily be replaced without changing any existing code. Connecting to an NTTP server requires authentication. There are numerous forms of authentication techniques supported by NNTP, such as encrypted password or clear text authentication. This component abstracts the authentication logic from the core component logic.'/>
			<component name='Encryption' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2810520' desc='The Encryption component provides a simplified framework for performing encryption/decryption routines. This framework can be used to easily access any implemented encryption algorithms to manipulate the target data source. The pluggable design enables additional encryption algorithms to be added to the list of available algorithms. Encryption is a vital mechanism for securing information. This component can be used to encrypt/decrypt data in any Java enabled application including databases, files, network communications and plain text.'/>
			<component name='Authorization' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9932070&ver=1' desc='Authorization is one part of the overall Security picture. Fundamentally, authorization answers of the question: can this entity perform this action on this object? The authorization component provides the framework for applications that require authorization checks. It may be used in conjunction with other security components, such as a User component and an Authentication component, to provide a complete security solution for an application. A particular application would extend the Authorization framework to define the particular authorization scheme needed. A web-based application could be build in which the web server handles authentication automatically, but the application must have rights based on who the user is. The application will use the user ID passed in by the web server as the basis for getting the users rights, which will then be used by the application for determining access.'/>
			<component name='Authentication Factory' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6403441' desc='The Authentication Factory abstracts the logic of authenticating a user against a specific implementation from the business tier. Utilizing the generic authentication factory, a company is not tied to a specific authentication scheme or product. A new implementation can easily be replaced without changing any existing code. Connecting to an NTTP server requires authentication. There are numerous forms of authentication techniques supported by NNTP, such as encrypted password or clear text authentication. This component abstracts the authentication logic from the core component logic.'/>
			<component name='Encryption' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2810520' desc='The Encryption component provides a simplified framework for performing encryption/decryption routines. This framework can be used to easily access any implemented encryption algorithms to manipulate the target data source. The pluggable design enables additional encryption algorithms to be added to the list of available algorithms. Encryption is a vital mechanism for securing information. This component can be used to encrypt/decrypt data in any Java enabled application including databases, files, network communications and plain text.'/>
		</appFunction>
		<appFunction name='Credit Card Processing'>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
			<component name='FTP Utility' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6401313' desc='The 100 managed C# FTP component wraps standard FTP commands into an easy to use API. FTP connections can be initiated in passive or active mode, and files can be transferred in ASCII or binary mode. For FTP commands that are not supported by this component, a facility is available to enter those commands directly through the API. A scheduled job requires the movement of the daily report spreadsheet to a web server. The FTP component is used to programmatically transfer the file to the web server for distribution.'/>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
			<component name='FTP Utility' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6401313' desc='The 100 managed C# FTP component wraps standard FTP commands into an easy to use API. FTP connections can be initiated in passive or active mode, and files can be transferred in ASCII or binary mode. For FTP commands that are not supported by this component, a facility is available to enter those commands directly through the API. A scheduled job requires the movement of the daily report spreadsheet to a web server. The FTP component is used to programmatically transfer the file to the web server for distribution.'/>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
			<component name='FTP Utility' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6401313' desc='The 100 managed C# FTP component wraps standard FTP commands into an easy to use API. FTP connections can be initiated in passive or active mode, and files can be transferred in ASCII or binary mode. For FTP commands that are not supported by this component, a facility is available to enter those commands directly through the API. A scheduled job requires the movement of the daily report spreadsheet to a web server. The FTP component is used to programmatically transfer the file to the web server for distribution.'/>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
		</appFunction>
		<appFunction name='Administration'>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
		</appFunction>
		<appFunction name='Security'>
			<component name='Authorization' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9932070&ver=1' desc='Authorization is one part of the overall Security picture. Fundamentally, authorization answers of the question: can this entity perform this action on this object? The authorization component provides the framework for applications that require authorization checks. It may be used in conjunction with other security components, such as a User component and an Authentication component, to provide a complete security solution for an application. A particular application would extend the Authorization framework to define the particular authorization scheme needed. A web-based application could be build in which the web server handles authentication automatically, but the application must have rights based on who the user is. The application will use the user ID passed in by the web server as the basis for getting the users rights, which will then be used by the application for determining access.'/>
			<component name='Authentication Factory' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6403441' desc='The Authentication Factory abstracts the logic of authenticating a user against a specific implementation from the business tier. Utilizing the generic authentication factory, a company is not tied to a specific authentication scheme or product. A new implementation can easily be replaced without changing any existing code. Connecting to an NTTP server requires authentication. There are numerous forms of authentication techniques supported by NNTP, such as encrypted password or clear text authentication. This component abstracts the authentication logic from the core component logic.'/>
			<component name='Encryption' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2810520' desc='The Encryption component provides a simplified framework for performing encryption/decryption routines. This framework can be used to easily access any implemented encryption algorithms to manipulate the target data source. The pluggable design enables additional encryption algorithms to be added to the list of available algorithms. Encryption is a vital mechanism for securing information. This component can be used to encrypt/decrypt data in any Java enabled application including databases, files, network communications and plain text.'/>
			<component name='Authorization' details='http://software.topcoder.com/catalog/c_component.jsp?comp=9932070&ver=1' desc='Authorization is one part of the overall Security picture. Fundamentally, authorization answers of the question: can this entity perform this action on this object? The authorization component provides the framework for applications that require authorization checks. It may be used in conjunction with other security components, such as a User component and an Authentication component, to provide a complete security solution for an application. A particular application would extend the Authorization framework to define the particular authorization scheme needed. A web-based application could be build in which the web server handles authentication automatically, but the application must have rights based on who the user is. The application will use the user ID passed in by the web server as the basis for getting the users rights, which will then be used by the application for determining access.'/>
			<component name='Authentication Factory' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6403441' desc='The Authentication Factory abstracts the logic of authenticating a user against a specific implementation from the business tier. Utilizing the generic authentication factory, a company is not tied to a specific authentication scheme or product. A new implementation can easily be replaced without changing any existing code. Connecting to an NTTP server requires authentication. There are numerous forms of authentication techniques supported by NNTP, such as encrypted password or clear text authentication. This component abstracts the authentication logic from the core component logic.'/>
			<component name='Encryption' details='http://software.topcoder.com/catalog/c_component.jsp?comp=2810520' desc='The Encryption component provides a simplified framework for performing encryption/decryption routines. This framework can be used to easily access any implemented encryption algorithms to manipulate the target data source. The pluggable design enables additional encryption algorithms to be added to the list of available algorithms. Encryption is a vital mechanism for securing information. This component can be used to encrypt/decrypt data in any Java enabled application including databases, files, network communications and plain text.'/>
		</appFunction>
		<appFunction name='Credit Card Processing'>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
			<component name='FTP Utility' details='http://software.topcoder.com/catalog/c_component.jsp?comp=6401313' desc='The 100 managed C# FTP component wraps standard FTP commands into an easy to use API. FTP connections can be initiated in passive or active mode, and files can be transferred in ASCII or binary mode. For FTP commands that are not supported by this component, a facility is available to enter those commands directly through the API. A scheduled job requires the movement of the daily report spreadsheet to a web server. The FTP component is used to programmatically transfer the file to the web server for distribution.'/>
			<component name='Credit Card Validation' details='http://software.topcoder.com/catalog/c_component.jsp?comp=10028532' desc='Credit Card Validation'/>
		</appFunction>
	</compDiagram>
</appSuite>