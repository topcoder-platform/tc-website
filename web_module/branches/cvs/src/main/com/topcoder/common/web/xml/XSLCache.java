package com.topcoder.common.web.xml;

import java.util.HashMap;
import org.apache.xalan.xslt.StylesheetRoot;
import com.topcoder.common.web.error.*;

public class XSLCache {

  private static HashMap cache = new HashMap(37);

  ////////////////////////////////////////////////////////////////////////////////
  public StylesheetRoot getStylesheet(String xsldocURLString) throws TCException {
  ////////////////////////////////////////////////////////////////////////////////
    StylesheetRoot result = null;
    try {
      XSLObject xslObject = (XSLObject) cache.get(xsldocURLString);
      if (xslObject != null)
      {
        result = xslObject.getStylesheet();
      }
    }catch(Exception e) {
      throw new TCException("common.XSLCache getStylesheet ERROR: " + e);
    }
    return result;
  }

  ////////////////////////////////////////////////////////////////////////////////
  public XSLObject getXSLObject(String xsldocURLString) throws TCException {
  ////////////////////////////////////////////////////////////////////////////////
    XSLObject result = null;

    try{
      result = (XSLObject) cache.get(xsldocURLString);
    }catch(Exception e) {
      throw new TCException("common.XSLCache getStylesheet ERROR: " + e);
    }

    return result;
  }
  
  ////////////////////////////////////////////////////////////////////////////////
  public synchronized void putXSLObject(String xsldocURLString, XSLObject xslObject) 
    throws TCException {
  ////////////////////////////////////////////////////////////////////////////////
    try {
      cache.put(xsldocURLString, xslObject);
    }catch(Exception e) {
      throw new TCException("common.XSLCache putStylesheet ERROR: " + e);
    }
  }

  ////////////////////////////////////////////////////////////////////////////////
  public boolean isEmpty() {
  ////////////////////////////////////////////////////////////////////////////////
    return cache.isEmpty();
  }

  ////////////////////////////////////////////////////////////////////////////////
  public synchronized void remove(String key) {
  ////////////////////////////////////////////////////////////////////////////////
    cache.remove(key);
  }

  ////////////////////////////////////////////////////////////////////////////////
  public synchronized void clear() {
  ////////////////////////////////////////////////////////////////////////////////
    cache.clear();
  }

  ////////////////////////////////////////////////////////////////////////////////
  public int size() {
  ////////////////////////////////////////////////////////////////////////////////
    return cache.size();
  }

}
