package com.topcoder.web.query.bean;

import com.topcoder.shared.dataAccess.resultSet.ResultSetContainer;
import com.topcoder.shared.util.ApplicationServer;
import com.topcoder.shared.util.logging.Logger;
import com.topcoder.web.query.ejb.QueryServices.QueryAuthenticationHome;
import com.topcoder.web.query.ejb.QueryServices.QueryAuthentication;
import com.topcoder.web.query.common.AuthenticationException;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.http.*;
import javax.ejb.CreateException;
import java.io.Serializable;
import java.rmi.RemoteException;

/**
 * A bean performing query tool Authentication and using given HttpSession objects for persistence
 * @author Greg Paul
 * @author bigjake <kitz@mit.edu>
 */

public class Authentication implements Serializable {
    private static Logger log = Logger.getLogger(Authentication.class);

    private static int USER_NOT_LOGGED_IN = -1;

    /* Holds the id of the currently logged in user */
    private long userId;

    /* Holds an error message, if any, generated by the last authentication attempt, if any. */
    private String errorMessage;

    /* Holds the URL for which access was attempted */
    private String requestedURL;

    private static final String AUTHENTICATION_KEY = "query_auth";

    /** Attempts to authenticate a user and set him/her as logged in
     * @param handle The handle of the user for this authentication request
     * @param password The password of the user for this authentication request
     * @param ctx The InitialContext of the originating request
     * @param session The HttpSession of the originating request
     * @param requestedURL The URL being requested
     * @throws AuthenticationException if the login information is incorrect
     * or there is a problem with the ejb
     */
    public static void attemptLogin(String handle, String password, InitialContext ctx,
                                    HttpSession session, String requestedURL) throws AuthenticationException {
        try {
            Authentication auth;

            if ( (auth=(Authentication)session.getAttribute(AUTHENTICATION_KEY))==null) {
                auth = new Authentication();
                session.setAttribute(AUTHENTICATION_KEY, auth);
            }

            auth.setUserId(USER_NOT_LOGGED_IN);
            auth.setRequestedURL(requestedURL);

            QueryAuthenticationHome qaHome = (QueryAuthenticationHome) ctx.lookup(ApplicationServer.QUERY_AUTHENTICATION);
            QueryAuthentication qa = qaHome.create();
            ResultSetContainer rsc = qa.getLoginInfo(handle);

            if (rsc.isEmpty()) {
                auth.setErrorMessage("Incorrect handle.  Please retry.");
                throw new AuthenticationException("Incorrect handle.  Please retry.");
            } else {
                String actualPassword = rsc.getItem(0, "password").toString();
                if (actualPassword == null) {
                    auth.setErrorMessage("Incorrect login.  Please retry.");
                    throw new AuthenticationException("Incorrect login.  Please retry.");
                }

                if (!actualPassword.trim().equals(password.trim())) {
                    auth.setErrorMessage("Incorrect password.  Please retry.");
                    throw new AuthenticationException("Incorrect password.  Please retry.");
                }
            }

            // record in this session that we have authenticated a user.
            auth.setUserId(((Long)rsc.getItem(0, "user_id").getResultData()).intValue());
        } catch (RemoteException e) {
            throw new AuthenticationException(e.getMessage());
        } catch (NamingException e) {
            throw new AuthenticationException("Could not find ejb with name: " +
                    ApplicationServer.QUERY_AUTHENTICATION + "\n" + e.getMessage());
        } catch (CreateException e) {
            throw new AuthenticationException("Could not create instance of QueryAuthentication ejb\n" + e.getMessage());
        }
    }

    /** Indicates whether a user is authenticated within the given session
     * @param session The HttpSession of the originating request
     * @return A boolean indicating whether a user is authenticated within the given session
     */
    public static boolean isLoggedIn(HttpSession session) {
        log.debug("isLoggedIn called...");
        Authentication auth = (Authentication)session.getAttribute(AUTHENTICATION_KEY);

        if (auth==null) {
            log.debug("no auth in session");
            return false;
        } else if (auth.getUserId()==USER_NOT_LOGGED_IN) {
            log.debug("user not logged in");
            return false;
        } else {
            log.debug("user logged in");
            return true;
        }
    }

    /** Indicates whether a user is authenticated within the given session, and the ID of that user
     * @param session The HttpSession of the originating request
     * @return The ID of the user authenticated, if any, within the given session
     */
    public static long userLoggedIn(HttpSession session) {
        Authentication auth = (Authentication)session.getAttribute(AUTHENTICATION_KEY);

        if (auth==null)
            return USER_NOT_LOGGED_IN;
        else
            return auth.getUserId();
    }


    private void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }


    /** Returns the error message generated by the last authentication attempt in the given session
     * @param session The HttpSession of the originating request
     * @return The authentication error message, if any, within the given session
     */
    public static String getErrorMessage(HttpSession session) {
        Authentication auth = (Authentication)session.getAttribute(AUTHENTICATION_KEY);

        if (auth==null)
            return "";
        else
            return auth.errorMessage;
    }

    /** Returns the requested URL during the last authentication attempt in the given session
     * @param session The HttpSession of the originating request
     * @return The requested URL during the last authentication attempt in the given session
     */
    public static String getRequestedURL(HttpSession session) {
        Authentication auth = (Authentication)session.getAttribute(AUTHENTICATION_KEY);

        if (auth==null)
            return "";
        else
            return (auth.requestedURL==null?"":auth.requestedURL);
    }

    public static void resetRequestedURL(HttpSession session) {
        Authentication auth = (Authentication)session.getAttribute(AUTHENTICATION_KEY);

        if (auth!=null)
            auth.requestedURL="";
    }

    private void setUserId(long userId) {
        this.userId=userId;
    }

    private long getUserId() {
        return userId;
    }

    private void setRequestedURL(String requestedURL) {
        this.requestedURL = requestedURL;
    }
}
